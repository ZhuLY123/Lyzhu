/* this program is to merge two arrays(disorder)
*  author:lingyu zhu
*/

public int[] mergeTwoArray(int[] A, int[] B) {
    int[] C = new int[A.length + B.length];
    int k = 0;
    int i = 0;
    int j = 0;
    while(i < A.length && j < B.length) {
        if (A[i] < B[j])
            C[k++] = A[i++];
        else
            C[k++] = B[j++];
    }
    while (i < A.length)
        C[k++] = A[i++];
    while (j < B.length)
        C[k++] = B[j++];
    return C;
}
//this program does not hava any sense, because merging two arrays just need two while. 


/* this program is to merge two sorted arrays
*  author:lingyu zhu
*  leetcode 
*  Given two sorted integer arrays A and B, merge B into A as one sorted array.
*  Note:
*  You may assume that A has enough space (size that is greater or equal to m + n)
*  to hold additional elements from B. The number of elements initialized in A and B are m and n respectively.
*/

public void merge(int A[], int m, int B[], int n) {
        while(m > 0 && n > 0){
            if(A[m-1] > B[n-1]){
                A[m+n-1] = A[m-1];
                m--;
            }else{
                A[m+n-1] = B[n-1];
                n--;
            }
        }
        while(n > 0){
            A[m+n-1] = B[n-1];
            n--;
        }
    }
    
    
/*  Given a sorted array, remove the duplicates in place such that each element appear only once and return the new length.
*   Do not allocate extra space for another array, you must do this in place with constant memory.
*   For example,
*   Given input array A =[1,1,2],
*   Your function should return length =2, and A is now[1,2].*/
/*


public class solution {
       public int removeduplicates(int [] A)
       {
             int index = 1;
             for(int i =1;i<A.length;i++)
             {
                    if(A[i]==A[i-1])
                    {
                          continue;
                    }else
                    {
                          A[index] = A[i];
                          index++;
                          
                    }
             }
             
             return count;
                    
       }
}
//trick： the count only count the unequal to previous number



/*Follow up for "Remove Duplicates":
What if duplicates are allowed at most twice?
For example,
Given sorted array A =[1,1,1,2,2,3],
Your function should return length =5, and A is now[1,1,2,2,3].
*/
public class solution {
       
       
       public int removeDupicates(int[] A)
       {
             int count =1;
             int j =1;
             for (int i =1;i<A.length;i++)
             {
                    if(A[i-1]==A[i])
                    {
                          count++;
                          if(count>=3)
                                 continue;   
                    }else
                          count = 1;
                    
                    
                    A[j++]=A[i];
             }
             
             return j;     
       }    
}







/*Suppose a sorted array is rotated at some pivot unknown to you beforehand. 
(i.e.,0 1 2 4 5 6 7might become4 5 6 7 0 1 2). 
You are given a target value to search. If found in the array return its index, otherwise return -1. 
You may assume no duplicate exists in the array. */

public class solution {
	public int search(int[] nums, int target) {

	 if(nums == null || nums.length == 0) return  -1;

     int start = 0, end = nums.length -1 ;
     while (start + 1 < end){
         int mid = start + (end - start)/2 ;
         if(nums[mid] == target) return mid;

         
         
         if(nums[start] < nums[mid]){ 
        	 //引入nums[start]分mid在x轴上和在x轴下两种情况讨论
             //situation 1  红线
             if(nums[mid]> target && nums[start] <= target ){
                 end = mid;
             }else{
                 start= mid;
             }
         }
         
     
         
         else{
             //situation 2 绿线 ，nums[start] >= nums[mid]
             if(nums[mid] <= target && nums[end] >= target){
                 start = mid;
             }else{
                 end =mid;
             }
         }
         
     }//while

     //double check 
     if (nums[start] == target ) return start;
     if (nums[end]== target) return end;
     return -1;
 }

}




Given an array with n integers, your task is to check if it could become non-decreasing by modifying at most 1 element. 
We define an array is non-decreasing if array[i] <= array[i + 1] holds for every i (1 <= i < n). 
Example 1:
Input: [4,2,3]
Output: True
Explanation: You could modify the first 4 to 1 to get a non-decreasing array.

Example 2:
Input: [4,2,1]
Output: False
Explanation: You can't get a non-decreasing array by modify at most one element.

the test example ：[3,4,2,3]
*如果一直升序，直接return true ； 碰到降序的时候再返回 false；

public class solution {
	
	public boolean checkPossibility(int [] nums) 
	{
		if(nums == null || nums.length<=1)
			return true;
		
		boolean found = false;
		for(int i =1;i<nums.length;i++) 
		{
			if(nums[i] < nums[i-1]) 
			{
				
				if(found)
					return false;
				else 
				{
					if(i-2>=0 && nums[i]<nums[i-2])
						nums[i] = nums[i-1];
					found = true;
				}	
			}//if 
			
		}//for
		
		
		return true;
	}
}





Time complexity: O(n)
import java.util.HashSet;
import java.util.Set;

//Given two arrays, write a function to compute their intersection.
/*Example 1:
Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2]
Example 2:
Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [9,4]*/


public class solution {
	
	public int[] intersection(int num1[], int num2[]) 
	{
		Set<Integer> set = new HashSet<Integer>();
		Set<Integer> interset = new HashSet<Integer>();
		
		for (int i =0; i<num1.length; i++) 
			set.add(num1[i]);
		
		for(int i =0; i< num2.length; i++)
			if(set.contains(num2[i])) 
				interset.add(num2[i]);
		
		int[] res = new int [interset.size()];
		int i =0;
		for(Integer num: interset )
			res[i++] = num;
		
		
		
		return res;
	}
	
}



Time complexity: O(nlogn)
import java.util.*;
public class bsolution {
	public int[] intersection(int [] num1, int [] num2) 
	{
		Arrays.sort(num1);
		Arrays.sort(num2);
		Set<Integer> set = new HashSet<Integer>();
		int i =0, j = 0;
		while(i<num1.length&&j<num2.length) 
		{
			if(num1[i]<num2[j])
				i++;
			else if(num1[i]>num2[j])
				j++;
			else 
			{
				set.add(num1[i]);
				i++;
				j++;
			}		
		}//while
		
		
		int[] res = new int[set.size()];
		int k =0;
		for(Integer num: set) 
		{
			res[k++] = num;
		}
		return res;
	}

}



In a array A of size 2N, there are N+1 unique elements, and exactly one of these elements is repeated N times.
Return the element repeated N times.

Example 1:
Input: [1,2,3,3]
Output: 3
Example 2:
Input: [2,1,2,5,3,2]
Output: 2
Example 3:
Input: [5,1,5,2,5,3,5,4]
Output: 5

class Solution {
    public int repeatedNTimes(int[] A) {
        Arrays.sort(A);
        int n =0;
        for(int i =1;i<A.length;i++)
        {
            if(A[i-1]!=A[i])
                continue;
            else
            {
                n=A[i];
            }
        }
        return n;
    }
}


class betterSolution {
    public int repeatedNTimes(int[] A) {
        Set<Integer> set = new HashSet<Integer>();
        for(int i =0;i<A.length;i++)
        {
            if(set.contains(A[i]))
                return A[i];
            else
                set.add(A[i]);     
        }
        return 0;
    }
}//trick: if the program cannot find the right answer, then return 0;





rotate array
Given an array, rotate the array to the right by k steps, where k is non-negative.
Example 1:
Input: [1,2,3,4,5,6,7] and k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]
Example 2:
Input: [-1,-100,3,99] and k = 2
Output: [3,99,-1,-100]
Explanation: 
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]
Note:
Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.
Could you do it in-place with O(1) extra space?

first solution : time limit exceeded, but I draw a picture that describe the rotating array. see in my Evernote
the first for 

class Solution {
    public void rotate(int[] nums, int k) {
        
        while(k % nums.length != 0)
        {
            for(int i =0; i< k % nums.length; i++)
            {
                int pre;
                pre = nums[nums.length - 1];
                for(int j = 0; j < nums.length; j++)
                {
                    int tem;
                    tem = nums[j];
                    nums[j] = pre;
                    pre = tem;
                }//for
                   
                
            }//for
            
        }//while
        
    }
}





second solution:

class Solution {
    
       public void rotate(int [] nums, int k) 
	{
		int N = nums.length;
		k = k%N;//Periodicity must be taken into account;
		
		int[] cut = Arrays.copyOfRange(nums, N-k, N);
		int[] rest = Arrays.copyOfRange(nums, 0, N-k);
		
		for(int i =0; i<k;i++)
		{
			nums[i] = cut[i];
			
		}	
		
		for (int i = k; i<N;i++) 
		{
			nums[i] = rest[i-k];
		}
		
	} 
        
}




public class csolution {
	public void rotate(int [] nums, int k) 
	{
		int len = nums.length, l =0 ,r=len-1;
		k= k%len;
		if(len ==0) return;
		
		int mid= len-k;
		reverse(nums, l, r);
		reverse(nums, l, mid-1);
		reverse(nums, mid, r);		
		
	}
	
	private void reverse(int [] nums, int l , int r) 
	{
		while(l<r) 
		{
			int temp = nums[l];
			nums[l++] = nums[r];
			nums[r--] =temp;
			
		}
		
	}

}




Shuffle a set of numbers without duplicates. 
Example: 
// Init an array with set 1, 2, and 3.
int[] nums = {1,2,3};
Solution solution = new Solution(nums);

// Shuffle the array [1,2,3] and return its result. Any permutation of [1,2,3] must equally likely to be returned.
solution.shuffle();

// Resets the array back to its original configuration [1,2,3].
solution.reset();

// Returns the random shuffling of array [1,2,3].
solution.shuffle();
//Shuffle the array [1,2,3],Any permutation of [1,2,3] must equally likely to be returned. 
The possilbility of each array is 1/6. the solution is to use the first element to replace with one elements at random,including itself. 
the possibilit of this step is 1/3. then the second element to do above, the possibility of this step is 1/2.
        

class Solution {
    private int[] orig;
	private int[] cur;
	
	public Solution(int [] nums) 
	{
		orig = nums;
	}
	
	/**reset the array to its original configuration and return it*/
	public int[] reset() 
	{
        return orig;

	}
	/**return a random shuffling of the array */
	public int[] shuffle() 
	{
        
		Random random = new Random();

		
	}
	
}

/**
 * Your Solution object will be instantiated and called as such:
 * Solution obj = new Solution(nums);
 * int[] param_1 = obj.reset();
 * int[] param_2 = obj.shuffle();
 */







